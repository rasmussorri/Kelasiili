package com.example.myapplication;

import com.example.myapplication.dataModels.MunicipalityInfo;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class QuizQuestionGenerator {

    // This class generates quiz questions based on municipality data.
    // It creates questions about population, employment rate, job self-reliance, and population change.
    // Each question has a correct answer and multiple options.
    // The questions are generated by selecting random municipalities and comparing their data.
    // The correct answer is the municipality with the highest value for the specific question.
    public static List<Question> generateQuestions(List<MunicipalityInfo> municipalities) {
        List<Question> questions = new ArrayList<>();

        questions.add(generatePopulationQuestion(municipalities));
        questions.add(generateEmploymentRateQuestion(municipalities));
        questions.add(generateJobSelfRelianceQuestion(municipalities));
        questions.add(generatePopulationChangeQuestion(municipalities));

        return questions;
    }
    private static Question generatePopulationQuestion(List<MunicipalityInfo> municipalities) {
        List<MunicipalityInfo> selected = getRandomMunicipalities(municipalities, 3);
        MunicipalityInfo correct = Collections.max(selected, Comparator.comparingInt(MunicipalityInfo::getPopulation));

        String[] options = selected.stream().map(MunicipalityInfo::getName).toArray(String[]::new);
        int correctIndex = Arrays.asList(options).indexOf(correct.getName());

        return new Question("Which city has the largest population?", options, correctIndex);
    }

    private static Question generateEmploymentRateQuestion(List<MunicipalityInfo> municipalities) {
        List<MunicipalityInfo> selected = getRandomMunicipalities(municipalities, 3);
        MunicipalityInfo correct = Collections.max(selected, Comparator.comparingDouble(MunicipalityInfo::getEmploymentRate));

        String[] options = selected.stream().map(MunicipalityInfo::getName).toArray(String[]::new);
        int correctIndex = Arrays.asList(options).indexOf(correct.getName());

        return new Question("Which city has the highest employment rate?", options, correctIndex);
    }

    private static Question generateJobSelfRelianceQuestion(List<MunicipalityInfo> municipalities) {
        List<MunicipalityInfo> selected = getRandomMunicipalities(municipalities, 3);
        MunicipalityInfo correct = Collections.max(selected, Comparator.comparingDouble(MunicipalityInfo::getJobSelfReliance));

        String[] options = selected.stream().map(MunicipalityInfo::getName).toArray(String[]::new);
        int correctIndex = Arrays.asList(options).indexOf(correct.getName());

        return new Question("In which city do the most people work in their home municipality?", options, correctIndex);
    }

    private static Question generatePopulationChangeQuestion(List<MunicipalityInfo> municipalities) {
        List<MunicipalityInfo> selected = getRandomMunicipalities(municipalities, 3);
        MunicipalityInfo correct = Collections.max(selected, Comparator.comparingDouble(MunicipalityInfo::getPopulationChange));

        String[] options = selected.stream().map(MunicipalityInfo::getName).toArray(String[]::new);
        int correctIndex = Arrays.asList(options).indexOf(correct.getName());

        return new Question("Which city had the highest population growth?", options, correctIndex);
    }

    private static List<MunicipalityInfo> getRandomMunicipalities(List<MunicipalityInfo> list, int count) {
        List<MunicipalityInfo> copy = new ArrayList<>(list);
        Collections.shuffle(copy);
        return copy.subList(0, Math.min(count, copy.size()));
    }
}


